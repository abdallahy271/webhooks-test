version: "3.9"

services:
  web:
    build: ./pigeon_django
    ports:
      - "8000:8000"
    container_name: pigeon_web_1
    # migrate django project upon bootup, seed each database with 25 entries
    command: >
      bash -c "
      python manage.py makemigrations
      && python manage.py migrate
      && python manage.py import_geodata
      && python manage.py check_superuser
      && python manage.py runserver 0.0.0.0:8000"

    # Mounted for easier development. Changes locally will automatically reflect in docker
    volumes:
      - ./pigeon_django:/usr/src/pigeon
    env_file:
      - ./.env/django.env
      - ./.env/firebase.env
    # Only boot up django project once postgres/postgis is fully ready to go
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  db:
    image: postgis/postgis:14-3.3
    container_name: pigeon_db_1
    # accessible locally (localhost) on port 5433
    ports:
      - "5433:5432"
    # Data persists across environment
    volumes:
      - /mnt/postgres/postgres_data/:/var/lib/postgresql/data/
    env_file:
      - ./.env/postgresql.env
    # perform healthcheck to make sure postgis is accepting connections at endpoint
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U pigeon -d pigeon -h db -p 5432'"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: pigeon_mongodb_1
    env_file:
      - ./.env/mongodb.env
    ports:
      - 27018:27017
    # mongo logs everything, it's a little too much. https://stackoverflow.com/questions/54090168/mongodb-logs-flood/54090812#54090812
    command: --quiet
    volumes:
      - /mnt/postgres/mongodb_data/:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
  
  autoheal:
    image: willfarrell/autoheal:latest
    tty: true
    container_name: autoheal
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

